{"version":3,"sources":["Navbar/Navbar.module.css","Dialogs/Dialogs.module.css","Header/Header.module.css","Profile/ProfileInfo/ProfileInfo.module.css","Assets/images/friend.jpg","Profile/Myposts/Myposts.module.css","Users/Users.module.css","Assets/images/preloader.svg","Assets/images/myphoto.jpg","Assets/images/titlephoto.jpg","Profile/Myposts/Post/Post.module.css","Assets/images/message.png","Assets/images/intro.png","serviceWorker.js","api/api.js","Redux/profile-reducer.js","Redux/dialogs-reducer.js","Redux/sidebar-reducer.js","Redux/users-reducer.js","Redux/auth-reducer.js","Redux/redux-store.js","Navbar/Navbar.jsx","Dialogs/DialogItem/DialogItem.jsx","Dialogs/Message/Message.jsx","Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","Dialogs/DialogsContainer.jsx","Users/Users.jsx","common/Preloader/Preloader.js","Users/UsersContainer.jsx","Profile/ProfileInfo/ProfileStatus.jsx","Profile/ProfileInfo/ProfileInfo.jsx","Profile/Myposts/Post/Post.jsx","Profile/Myposts/Myposts.jsx","Profile/Myposts/MypostsContainer.jsx","Profile/Profile.jsx","Profile/ProfileContainer.jsx","Header/Header.jsx","Header/HeaderContainer.jsx","Login/Login.jsx","App.js","index.js"],"names":["module","exports","navbar","item","link","active","friendsBlock","dialogs","dialogsItems","dialog","messages","message","textArea","buttonAddPost","header_logo","header_logo-spin","header","header_title","loginBlock","content","image_container","content_image","description","__webpack_require__","p","postsBlock","userPhoto","selectedPage","Boolean","window","location","hostname","match","instance","axios","withCredentials","baseURL","headers","API-KEY","usersAPI","currentPage","arguments","length","undefined","pageSize","get","concat","then","response","data","userId","post","delete","console","warn","profileAPI","getProfile","getStatus","updateStatus","status","put","initialState","posts","id","likesCount","newPostText","profile","setStatus","type","profileReducer","state","action","newPost","Object","objectSpread","toConsumableArray","newText","name","newMessageBody","dialogsReducer","body","sidebarReducer","users","totalUsersCount","isFetching","followingInProgress","toggleIsFetching","toggleFollowingProgress","usersReducer","map","u","followed","count","filter","email","login","isAuth","setAuthUserData","authReducer","reducers","combineReducers","profilePage","dialogsPage","sidebar","usersPage","auth","store","createStore","applyMiddleware","thunkMiddleware","Navbar","react_default","a","createElement","className","cls","react_router_dom","to","activeClassName","activel","activeclassName","DialogItem","props","path","s","Message","Dialogs","dialogsElements","d","Dialogs_DialogItem_DialogItem","key","messagesElements","m","Dialogs_Message_Message","value","onChange","e","text","target","updateNewMessageBody","placeholder","onClick","sendMessage","react_router","mapStateToPropsForRedirect","withAuthRedirect","Component","RedirectComponent","_React$Component","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","inherits","createClass","React","connect","compose","dispatch","Users","pagesCount","Math","ceil","pages","i","push","styles","onPageChanged","src","photos","small","disabled","some","unfollow","follow","Preloader","style","backgroundColor","preloader","UsersContainer","pageNumber","_this","getUsers","Fragment","common_Preloader_Preloader","src_Users_Users","resultCode","followSuccess","unfollowSuccess","setCurrentPage","items","totalCount","ProfileStatus","editMode","activateEditMode","setState","onStatusChange","currentTarget","onDoubleClick","autoFocus","onBlur","deactivateEditMode","bind","ProfileInfo","titlephoto","myphoto","large","ProfileInfo_ProfileStatus","Post","friend","alt","Myposts","postElements","Myposts_Post_Post","newPostElement","createRef","current","updateNewPostText","ref","addPost","MypostsContainer","updateNewPostTextActionCreator","Profile","Profile_ProfileInfo_ProfileInfo","Myposts_MypostsContainer","ProfileContainer","params","getUserProfile","src_Profile_Profile","assign","withRouter","Header","header_block","title","HeaderContainer","_response$data$data","src_Header_Header","Login","App","Header_HeaderContainer","src_Navbar_Navbar","render","DialogsContainer","Profile_ProfileContainer","Users_UsersContainer","src_Login_Login","intro","ReactDOM","react_redux_es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.885d590d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__2bdKG\",\"item\":\"Navbar_item__jzr_G\",\"link\":\"Navbar_link__3LNpP\",\"active\":\"Navbar_active__3nIBX\",\"friendsBlock\":\"Navbar_friendsBlock__39HTz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__mBztL\",\"dialogsItems\":\"Dialogs_dialogsItems__1pv23\",\"active\":\"Dialogs_active__2NI8r\",\"dialog\":\"Dialogs_dialog__1x5HV\",\"messages\":\"Dialogs_messages__1zmjC\",\"message\":\"Dialogs_message__2WKLN\",\"textArea\":\"Dialogs_textArea__3fDY6\",\"buttonAddPost\":\"Dialogs_buttonAddPost__3JCOD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header_logo\":\"Header_header_logo__ofk9p\",\"header_logo-spin\":\"Header_header_logo-spin__3DZJJ\",\"header\":\"Header_header__2nOzq\",\"header_title\":\"Header_header_title__2Fifb\",\"loginBlock\":\"Header_loginBlock__3hSjS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileInfo_content__11S3N\",\"image_container\":\"ProfileInfo_image_container__UIQaj\",\"content_image\":\"ProfileInfo_content_image__2dC2Z\",\"description\":\"ProfileInfo_description__2MZeb\"};","module.exports = __webpack_public_path__ + \"static/media/friend.595172f9.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"Myposts_postsBlock__2JCNy\",\"textArea\":\"Myposts_textArea__2DBYT\",\"buttonAddPost\":\"Myposts_buttonAddPost__1p-zJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__21v4A\",\"selectedPage\":\"Users_selectedPage__2dL3p\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.6c3daf60.svg\";","module.exports = __webpack_public_path__ + \"static/media/myphoto.ba0c4a8e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/titlephoto.3903a2af.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1JrN_\"};","module.exports = __webpack_public_path__ + \"static/media/message.f0fb1b34.png\";","module.exports = __webpack_public_path__ + \"static/media/intro.b8c9a73e.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as axios from \"axios\";\n\n\nconst instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers:     {\n        \"API-KEY\": \"43c65e7f-92e8-475a-8561-392240ecd570\"\n    }\n});\n\n\nexport const usersAPI = {\n    getUsers(currentPage = 1, pageSize = 10) {\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\n            .then(response => {\n                return response.data;\n            });\n    },\n    follow(userId) {\n        return instance.post(`follow/${userId}`)\n    },\n    unfollow(userId) {\n        return instance.delete(`follow/${userId}`)\n    },\n    getProfile(userId) {\n        console.warn('Obsolete method. Please profileAPI object.');\n        return profileAPI.getProfile(userId);\n    }\n};\n\nexport const profileAPI = {\n    getProfile(userId) {\n        return instance.get(`profile/` + userId);\n    },\n    getStatus(userId) {\n        return instance.get(`profile/status/` + userId);\n    },\n    updateStatus(status) {\n        return instance.put(`profile/status`, { status: status });\n    }\n};\n\nexport const authAPI = {\n    me() {\n        return instance.get(`auth/me`)\n    }\n};\n\n\n\n","import {profileAPI, usersAPI} from \"../api/api\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_STATUS = 'SET_STATUS';\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likesCount: 12},\r\n        {id: 2, message: 'It\\'s my first post', likesCount: 11},\r\n        {id: 3, message: 'Blabla', likesCount: 11},\r\n        {id: 4, message: 'Dada', likesCount: 11}\r\n    ],\r\n    newPostText: 'it-kamasutra.com',\r\n    profile: null,\r\n    status: \"\"\r\n};\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n\r\n    switch(action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                message: state.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: ''\r\n            };\r\n        }\r\n        case UPDATE_NEW_POST_TEXT: {\r\n            return {\r\n                ...state,\r\n                newPostText: action.newText\r\n            }\r\n        }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const addPostActionCreator = () => ({type: ADD_POST})\r\nexport const setUserProfile = (profile) => ({type: SET_USER_PROFILE, profile})\r\nexport const setStatus = (status) => ({type: SET_STATUS, status})\r\n\r\nexport const getUserProfile = (userId) => (dispatch) => {\r\n    usersAPI.getProfile(userId).then(response => {\r\n        dispatch(setUserProfile(response.data));\r\n    });\r\n}\r\n\r\nexport const getStatus = (userId) => (dispatch) => {\r\n    profileAPI.getStatus(userId)\r\n        .then(response => {\r\n            dispatch(setStatus(response.data));\r\n        });\r\n}\r\n\r\nexport const updateStatus = (status) => (dispatch) => {\r\n    profileAPI.updateStatus(status)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setStatus(status));\r\n            }\r\n        });\r\n}\r\n\r\nexport const updateNewPostTextActionCreator = (text) =>\r\n    ({type: UPDATE_NEW_POST_TEXT, newText: text })\r\n\r\nexport default profileReducer;","const UPDATE_NEW_MESSAGE_BODY = 'UPDATE_NEW_MESSAGE_BODY';\r\nconst SEND_MESSAGE = 'SEND_MESSAGE';\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Alex'},\r\n        {id: 2, name: 'Andrew'},\r\n        {id: 3, name: 'Sveta'},\r\n        {id: 4, name: 'Sasha'},\r\n        {id: 5, name: 'Alex'},\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'Yo'},\r\n        {id: 3, message: 'Yo'},\r\n        {id: 4, message: 'Yo'},\r\n        {id: 5, message: 'How are you?'}\r\n    ],\r\n    newMessageBody: \"\"\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case UPDATE_NEW_MESSAGE_BODY:\r\n            return {\r\n                ...state,\r\n                newMessageBody: action.body\r\n            };\r\n        case SEND_MESSAGE:\r\n            let body = state.newMessageBody;\r\n            return {\r\n                ...state,\r\n                newMessageBody: '',\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const sendMessageCreator = () => ({type: SEND_MESSAGE});\r\nexport const updateNewMessageBodyCreator = (body) =>\r\n    ({type: UPDATE_NEW_MESSAGE_BODY, body: body});\r\n\r\nexport default dialogsReducer;","let initialState = {};\r\n\r\nconst sidebarReducer = (state = initialState, action) => {\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import {usersAPI} from \"../api/api\";\n\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\n\nlet initialState = {\n    users: [],\n    pageSize: 5,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: true,\n    followingInProgress: []\n};\n\nconst usersReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case FOLLOW:\n            return {\n                ...state,\n                users: state.users.map( u =>  {\n                    if (u.id === action.userId) {\n                        return {...u, followed: true}\n                    }\n                    return u;\n                })\n            }\n        case UNFOLLOW:\n            return {\n                ...state,\n                users: state.users.map( u =>  {\n                    if (u.id === action.userId) {\n                        return {...u, followed: false}\n                    }\n                    return u;\n                })\n            }\n        case SET_USERS: {\n            return { ...state, users: action.users }\n        }\n        case SET_CURRENT_PAGE: {\n            return { ...state, currentPage: action.currentPage}\n        }\n        case SET_TOTAL_USERS_COUNT: {\n            return { ...state, totalUsersCount: action.count}\n        }\n        case TOGGLE_IS_FETCHING: {\n            return { ...state, isFetching: action.isFetching}\n        }\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id != action.userId)\n            }\n        }\n        default:\n            return state;\n    }\n}\n\n\nexport const followSuccess = (userId) => ({type: FOLLOW, userId })\nexport const unfollowSuccess = (userId) => ({type: UNFOLLOW, userId })\nexport const setUsers = (users) => ({type: SET_USERS, users })\nexport const setCurrentPage = (currentPage) => ({type: SET_CURRENT_PAGE, currentPage })\nexport const setTotalUsersCount = (totalUsersCount) => ({type: SET_TOTAL_USERS_COUNT, count: totalUsersCount })\nexport const toggleIsFetching = (isFetching) => ({type: TOGGLE_IS_FETCHING, isFetching })\nexport const toggleFollowingProgress = (isFetching, userId) => ({type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId })\n\nexport const getUsers = (currentPage, pageSize) => {\n    return (dispatch) => {\n        dispatch(toggleIsFetching(true));\n\n        usersAPI.getUsers(currentPage, pageSize).then(data => {\n            dispatch(toggleIsFetching(false));\n            dispatch(setUsers(data.items));\n            dispatch(setTotalUsersCount(data.totalCount));\n        });\n    }\n}\nexport const follow = (userId) => {\n    return (dispatch) => {\n        dispatch(toggleFollowingProgress(true, userId));\n        usersAPI.follow(userId)\n            .then(response => {\n                if (response.data.resultCode == 0) {\n                    dispatch(followSuccess(userId));\n                }\n                dispatch(toggleFollowingProgress(false, userId));\n            });\n    }\n}\nexport const unfollow = (userId) => {\n    return (dispatch) => {\n        dispatch(toggleFollowingProgress(true, userId));\n        usersAPI.unfollow(userId)\n            .then(response => {\n                if (response.data.resultCode == 0) {\n                    dispatch(unfollowSuccess(userId));\n                }\n                dispatch(toggleFollowingProgress(false, userId));\n            });\n    }\n}\n\nexport default usersReducer;","import {authAPI} from \"../api/api\";\n\nconst SET_USER_DATA = 'SET_USER_DATA';\n\n\nlet initialState = {\n    userId: null,\n    email: null,\n    login: null,\n    isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_USER_DATA:\n\n            return {\n                ...state,\n                ...action.data,\n                isAuth: true\n            }\n\n        default:\n            return state;\n    }\n}\n\n\nexport const setAuthUserData = (userId, email, login) => ({type: SET_USER_DATA, data: {userId, email, login}  })\nexport const getAuthUserData = () => (dispatch) => {\n    authAPI.me()\n        .then(response => {\n            if (response.data.resultCode === 0) {\n                let {id, login, email} = response.data.data;\n                dispatch(setAuthUserData(id, email, login));\n            }\n        });\n}\n\nexport default authReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer\r\n});\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nwindow.store = store;\r\n\r\n\r\nexport default store;","import React from 'react';\r\nimport cls from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <div className={cls.navbar}>\r\n            <div className={cls.item}>\r\n                <i className=\"fa fa-address-book\"/>\r\n                <NavLink to=\"/profile\" className={cls.link} activeClassName={cls.active}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${cls.item} ${cls.activel}`}>\r\n                <i className=\"fa fa-comments\"/>\r\n                <NavLink to=\"/dialogs\" className={cls.link} activeClassName={cls.active}>Messages</NavLink>\r\n            </div>\r\n            <div className={`${cls.item} ${cls.activel}`}>\r\n                <i className=\"fa fa-user\"/>\r\n                <NavLink to=\"/users\" className={cls.link} activeClassName={cls.active}>Users</NavLink>\r\n            </div>\r\n\r\n            <div className={cls.item}>\r\n                <i className=\"fa fa-newspaper-o\"/>\r\n                <NavLink className={cls.link} activeclassName={cls.active}>News</NavLink>\r\n            </div>\r\n            <div className={cls.item}>\r\n                <i className=\"fa fa-headphones\"/>\r\n                <NavLink className={cls.link} activeclassName={cls.active}>Music</NavLink>\r\n            </div>\r\n            <div className={cls.item}>\r\n                <i className=\"fa fa-play\"/>\r\n                <NavLink className={cls.link} activeclassName={cls.active}> Video</NavLink>\r\n            </div>\r\n            <div className={cls.item}>\r\n                <i className=\"fa fa-user-circle \"/>\r\n                <NavLink className={cls.link} activeclassName={cls.active}>Friends</NavLink>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n};\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n    return <div className={s.dialog}>{props.message}</div>\r\n};\r\n\r\nexport default Message;","import React from 'react';\r\nimport cls from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>);\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id}/>);\r\n    let newMessageBody = state.newMessageBody;\r\n\r\n    let onSendMessageClick = () => {\r\n        props.sendMessage();\r\n    };\r\n\r\n    let onNewMessageChange = (e) => {\r\n        let text = e.target.value;\r\n        props.updateNewMessageBody(text);\r\n    };\r\n\r\n    if (!props.isAuth) return <Redirect to={\"/login\"}/>;\r\n\r\n    return (\r\n        <div>\r\n            <h3> Message</h3>\r\n            <div><textarea value={newMessageBody}\r\n                           onChange={onNewMessageChange}\r\n                           placeholder='Enter your message'\r\n                           className={cls.textArea}>\r\n                </textarea>\r\n                <button onClick={onSendMessageClick}\r\n                        className={cls.buttonAddPost}>Send\r\n                </button>\r\n            </div>\r\n            <div className={cls.dialogs}>\r\n                <div className={cls.dialogsItems}>\r\n                    {dialogsElements}\r\n                </div>\r\n                <div className={cls.messages}>\r\n                    {messagesElements}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Dialogs;\r\n\r\n\r\n","import React from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nlet mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth\n});\n\nexport const withAuthRedirect = (Component) => {\n\n    class RedirectComponent extends React.Component {\n        render() {\n            if (!this.props.isAuth) return <Redirect to='/login' />\n\n            return <Component {...this.props}/>\n        }\n    }\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\n\n    return ConnectedAuthRedirectComponent;\n\n}","import React from 'react';\r\nimport {sendMessageCreator, updateNewMessageBodyCreator} from \"../Redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: () => {\r\n            dispatch(sendMessageCreator());\r\n        },\r\n        updateNewMessageBody: (text) => {\r\n            dispatch(updateNewMessageBodyCreator(text));\r\n        }\r\n    }\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);","import React from 'react';\r\nimport styles from \"./Users.module.css\";\r\nimport userPhoto from \"../Assets/images/friend.jpg\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport * as axios from \"axios\";\r\nimport {toggleFollowingProgress} from \"../Redux/users-reducer\";\r\nimport {usersAPI} from \"../api/api\";\r\n\r\nlet Users = (props) => {\r\n\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\r\n\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n\r\n    return <div>\r\n        <div>\r\n            {pages.map(p => {\r\n                return <span className={props.currentPage === p && styles.selectedPage}\r\n                             onClick={(e) => {\r\n                                 props.onPageChanged(p);\r\n                             }}>{p}</span>\r\n            })}\r\n        </div>\r\n        {\r\n            props.users.map(u => <div key={u.id}>\r\n                <span>\r\n                    <div>\r\n                       <NavLink to={'/profile/' + u.id}>\r\n                        <img src={u.photos.small != null ? u.photos.small : userPhoto}\r\n                             className={styles.userPhoto}/>\r\n                       </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {u.followed\r\n                            ? <button disabled={props.followingInProgress\r\n                                .some(id => id === u.id)}\r\n                                      onClick={() => { props.unfollow(u.id) }}>\r\n                                Unfollow</button>\r\n                            : <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                      onClick={() => { props.follow(u.id) }}>\r\n                                Follow</button>}\r\n\r\n                    </div>\r\n                </span>\r\n                <span>\r\n                    <span>\r\n                        <div>{u.name}</div>\r\n                        <div>{u.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{\"u.location.country\"}</div>\r\n                        <div>{\"u.location.city\"}</div>\r\n                    </span>\r\n                </span>\r\n            </div>)\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default Users;","import React from 'react';\nimport preloader from \"../../Assets/images/preloader.svg\";\n\nlet Preloader = (props) => {\n    return <div  style={ { backgroundColor: 'white' } }>\n        <img src={preloader} />\n    </div>\n};\n\nexport default Preloader;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    follow,\r\n    setCurrentPage,\r\n    unfollow, toggleFollowingProgress, getUsers\r\n} from '../Redux/users-reducer';\r\nimport * as axios from 'axios';\r\nimport Users from './Users';\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {usersAPI} from \"../api/api\";\r\nimport {withAuthRedirect} from \"../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\n\r\nclass UsersContainer extends React.Component {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            { this.props.isFetching ? <Preloader /> : null }\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={this.props.users}\r\n                   follow={this.props.follow}\r\n                   unfollow={this.props.unfollow}\r\n                   followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress\r\n    }\r\n};\r\n\r\n\r\nexport default compose(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps,{follow, unfollow, setCurrentPage, toggleFollowingProgress, getUsers })\r\n)(UsersContainer)","import React from 'react';\nclass ProfileStatus extends React.Component {\n    state = {\n        editMode: false,\n        status: this.props.status\n    };\n\n    activateEditMode = () => {\n        this.setState( {\n            editMode: true\n        } );\n    };\n    deactivateEditMode() {\n        this.setState( {\n            editMode: false\n        } );\n        this.props.updateStatus(this.state.status);\n    }\n\n    onStatusChange = (e) => {\n        this.setState({\n            status: e.currentTarget.value\n        });\n    };\n\n    render() {\n        return (\n            <div>\n                {!this.state.editMode &&\n                    <div>\n                        <span onDoubleClick={ this.activateEditMode }>{this.props.status || \"-------\"}</span>\n                    </div>\n                }\n                {this.state.editMode &&\n                    <div>\n                        <input onChange={this.onStatusChange} autoFocus={true} onBlur={ this.deactivateEditMode.bind(this) } value={this.state.status}/>\n                    </div>\n                }\n            </div>\n        )\n    }\n}\n\nexport default ProfileStatus;","import React from 'react';\r\nimport cls from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport myphoto from '../../Assets/images/myphoto.jpg';\r\nimport titlephoto from '../../Assets/images/titlephoto.jpg';\r\n\r\nconst ProfileInfo = (props) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div className={cls.content}>\r\n            <div className={cls.image_container}>\r\n                <img className={cls.content_image} src={titlephoto}/>\r\n            </div>\r\n            <div className={cls.description}>\r\n                <img src={myphoto}/>\r\n                <img src={props.profile.photos.large}/>\r\n                <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport cls from './Post.module.css';\r\nimport friend from '../../../Assets/images/friend.jpg';\r\n\r\nconst Post = (props) => {\r\n\r\n        return (\r\n\r\n        <div className={cls.item}>\r\n\r\n            <img src={friend} alt=\"avatar\"/>\r\n\r\n            {props.message}\r\n            <p>likes:{props.likesCount}</p>\r\n        </div>\r\n    );\r\n    }\r\n    export default Post;","import React from 'react';\r\nimport cls from './Myposts.module.css';\r\nimport Post from './Post/Post';\r\n\r\n\r\nconst Myposts = (props) => {\r\n\r\n    let postElements = props.posts\r\n        .map( message => <Post message={message.message} likesCount={message.likesCount} />)\r\n\r\n    let newPostElement  = React.createRef();\r\n\r\n    let onAddPost =() =>{\r\n        props.addPost();\r\n          };\r\n    let onPostChange =() =>{\r\n        let text = newPostElement.current.value;\r\n        props.updateNewPostText(text);\r\n    };\r\n\r\n\r\n    return (\r\n\r\n        <div className={cls.postsBlock}><h3> My posts</h3>\r\n            <div>\r\n                <textarea onChange={onPostChange}\r\n                          ref={newPostElement}\r\n                          value={props.newPostText}\r\n                          className={cls.textArea}></textarea>\r\n                <button onClick={onAddPost} className={cls.buttonAddPost}>Add post</button>\r\n\r\n            </div>\r\n            <div>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Myposts;\r\n","import React from 'react';\r\nimport Myposts from './Myposts';\r\nimport {addPostActionCreator, updateNewPostTextActionCreator} from '../.././Redux/profile-reducer';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\nlet mapStateToProps = (state) =>{\r\n\r\n    return {\r\n\r\n        newPostText:state.profilePage.newPostText,\r\n        posts:state.profilePage.posts\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return {\r\n        addPost: () =>{\r\n            dispatch(addPostActionCreator());\r\n        },\r\n        updateNewPostText: (text) =>{\r\n            let action = dispatch(updateNewPostTextActionCreator(text));\r\n        dispatch(action);\r\n        }\r\n    }\r\n}\r\n\r\nconst MypostsContainer = connect(mapStateToProps,mapDispatchToProps)(Myposts);\r\n\r\nexport default MypostsContainer;\r\n","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MypostsContainer from \"./Myposts/MypostsContainer\";\r\n\r\n\r\nconst Profile = (props) => {\r\n\r\n    return (\r\n\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MypostsContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\nimport Profile from \"./Profile\";\nimport * as axios from \"axios\";\nimport {connect} from \"react-redux\";\nimport {getStatus, getUserProfile, updateStatus} from \"../Redux/profile-reducer\";\nimport {Redirect, withRouter} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\nclass ProfileContainer extends React.Component {\n\n    componentDidMount() {\n        let userId = this.props.match.params.userId;\n        if (!userId) {\n            userId = 1049;\n        }\n        this.props.getUserProfile(userId);\n        this.props.getStatus(userId);\n    }\n\n    render() {\n        return (\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus}/>\n        )\n    }\n}\n\nlet mapStateToProps = (state) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status\n});\n\nexport default compose(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\n    withRouter\n)(ProfileContainer);\n\n\n\n\n","import React from 'react';\r\nimport cls from './Header.module.css';\r\nimport title from \"./../Assets/images/message.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <header className={cls.header}>\r\n            <div className={cls.header_block}><img className={cls.header_logo} src={title}/>\r\n                <p className={cls.header_title}>Сheerful conversation!</p>\r\n                <div className={cls.loginBlock}>\r\n                    {props.isAuth ? props.login\r\n                        : <NavLink to={'/login'}>Login</NavLink>}\r\n                </div>\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\nexport default Header;","import React from 'react';\nimport Header from \"./Header\";\nimport * as axios from \"axios\";\nimport {connect} from \"react-redux\";\nimport {setAuthUserData} from \"../Redux/auth-reducer\";\n\nclass HeaderContainer extends React.Component {\n    componentDidMount() {\n        axios.get(`https://social-network.samuraijs.com/api/1.0/auth/me`, {\n            withCredentials: true\n        })\n            .then(response => {\n                if (response.data.resultCode === 0) {\n                    let {id, login, email} = response.data.data;\n                    this.props.setAuthUserData(id, email, login);\n                }\n            });\n    }\n    render() {\n        return <Header {...this.props} />\n    }\n}\nconst mapStateToProps = (state) => ({\n    isAuth: state.auth.isAuth,\n    login: state.auth.login,\n});\n\nexport default connect(mapStateToProps, {setAuthUserData})(HeaderContainer);","import React from 'react';\n\nconst Login = (props) => {\n    return <h1>LOGIN</h1>\n}\n\nexport default Login;","import React from 'react';\nimport './App.css';\nimport Navbar from './Navbar/Navbar';\nimport {Route} from \"react-router-dom\";\nimport DialogsContainer from \"./Dialogs/DialogsContainer\";\nimport UsersContainer from \"./Users/UsersContainer\";\nimport ProfileContainer from \"./Profile/ProfileContainer\";\nimport HeaderContainer from \"./Header/HeaderContainer\";\nimport LoginPage from \"./Login/Login\";\nimport intro from './Assets/images/intro.png';\n\nconst App = () => {\n    return (\n        <div className='app-page'>\n            <HeaderContainer />\n            <Navbar />\n            <div className='app-page_content'>\n                <Route path='/dialogs'\n                       render={ () => <DialogsContainer /> }/>\n\n                <Route path='/profile/:userId?'\n                       render={ () => <ProfileContainer /> }/>\n\n                <Route path='/users'\n                       render={ () => <UsersContainer /> }/>\n\n                <Route path='/login'\n                       render={ () => <LoginPage /> }/>\n\n                <img className=\"app-page_intro\" src={intro} alt='intro'/>\n            </div>\n            <footer className=\"footer\" />\n        </div>\n    )\n};\n\nexport default App;","import * as serviceWorker from './serviceWorker';\nimport store from './Redux/redux-store';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from 'react-redux';\n\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>, document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}